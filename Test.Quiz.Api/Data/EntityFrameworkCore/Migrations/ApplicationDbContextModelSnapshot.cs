// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Test.Quiz.Api.Data.EntityFrameworkCore;

#nullable disable

namespace Test.Quiz.Api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.26")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserRole<Guid>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("Test.Quiz.Api.Data.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CommentsCount")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ExamId")
                        .HasColumnType("int");

                    b.Property<int?>("ParentCommentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Test.Quiz.Api.Data.Entities.Exam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("time");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsAllowChangeTab")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMixQuestion")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMixQuestionAnswer")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSeeScore")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsShowContent")
                        .HasColumnType("bit");

                    b.Property<int?>("NumberQuestionDifficult")
                        .HasColumnType("int");

                    b.Property<int?>("NumberQuestionEasy")
                        .HasColumnType("int");

                    b.Property<int?>("NumberQuestionModerate")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("Test.Quiz.Api.Data.Entities.ExamQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ExamId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.HasIndex("QuestionId");

                    b.ToTable("ExamQuestions");
                });

            modelBuilder.Entity("Test.Quiz.Api.Data.Entities.ExamResult", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan?>("DurationTime")
                        .HasColumnType("time");

                    b.Property<int?>("ExamId")
                        .HasColumnType("int");

                    b.Property<int?>("NumberChangeTab")
                        .HasColumnType("int");

                    b.Property<int?>("NumberCorrectAnswers")
                        .HasColumnType("int");

                    b.Property<int?>("Score")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.ToTable("ExamResults");
                });

            modelBuilder.Entity("Test.Quiz.Api.Data.Entities.ExamToeic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("time");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsAllowChangeTab")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMixQuestion")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMixQuestionAnswer")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSeeScore")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsShowContent")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("ExamToeics");
                });

            modelBuilder.Entity("Test.Quiz.Api.Data.Entities.ExamToeicResult", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan?>("DurationTime")
                        .HasColumnType("time");

                    b.Property<int?>("ExamToeicId")
                        .HasColumnType("int");

                    b.Property<int?>("NumberChangeTab")
                        .HasColumnType("int");

                    b.Property<int?>("NumberCorrectListeningAnswers")
                        .HasColumnType("int");

                    b.Property<int?>("NumberCorrectOverallAnswers")
                        .HasColumnType("int");

                    b.Property<int?>("NumberCorrectReadingAnswers")
                        .HasColumnType("int");

                    b.Property<int?>("Score")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ExamToeicId");

                    b.ToTable("ExamToeicResults");
                });

            modelBuilder.Entity("Test.Quiz.Api.Data.Entities.ExamToeicResultDetail", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ExamToeicResultId")
                        .HasColumnType("int");

                    b.Property<int?>("QuestionAnswerCorrectId")
                        .HasColumnType("int");

                    b.Property<int?>("QuestionAnswerId")
                        .HasColumnType("int");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ExamToeicResultId");

                    b.ToTable("ExamToeicResultDetails");
                });

            modelBuilder.Entity("Test.Quiz.Api.Data.Entities.GroupToeic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Audio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Paragraph")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PartToeicId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PartToeicId");

                    b.ToTable("GroupToeics");
                });

            modelBuilder.Entity("Test.Quiz.Api.Data.Entities.GroupToeicQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("GroupToeicId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GroupToeicId");

                    b.HasIndex("QuestionId");

                    b.ToTable("GroupToeicQuestions");
                });

            modelBuilder.Entity("Test.Quiz.Api.Data.Entities.PartToeic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ExamToeicId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ExamToeicId");

                    b.ToTable("PartToeics");
                });

            modelBuilder.Entity("Test.Quiz.Api.Data.Entities.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Audio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Difficulty")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Paragraph")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int?>("SectionId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeForm")
                        .HasColumnType("int");

                    b.Property<int>("TypeKind")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuestionCategoryId");

                    b.HasIndex("SectionId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Test.Quiz.Api.Data.Entities.QuestionAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionAnswers");
                });

            modelBuilder.Entity("Test.Quiz.Api.Data.Entities.QuestionCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentQuestionCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("QuestionCategories");
                });

            modelBuilder.Entity("Test.Quiz.Api.Data.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("8d04dce2-969a-435d-bba4-df3f325983dc"),
                            ConcurrencyStamp = "83daf5f8-ec4a-4b4d-b879-60c03b661b31",
                            Description = "Admin Role",
                            Name = "admin",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = new Guid("c3f087a2-48d5-4e09-8a63-8830a7b5b4e3"),
                            ConcurrencyStamp = "7992bb63-a242-40c5-99c4-b649464dccba",
                            Description = "User Role",
                            Name = "user",
                            NormalizedName = "user"
                        });
                });

            modelBuilder.Entity("Test.Quiz.Api.Data.Entities.Section", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("Test.Quiz.Api.Data.Entities.ToeicScore", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("NumberOfCorrect")
                        .HasColumnType("int");

                    b.Property<int?>("Score")
                        .HasColumnType("int");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("ToeicScores");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NumberOfCorrect = 0,
                            Score = 5,
                            Type = 1
                        },
                        new
                        {
                            Id = 2,
                            NumberOfCorrect = 1,
                            Score = 5,
                            Type = 1
                        },
                        new
                        {
                            Id = 3,
                            NumberOfCorrect = 2,
                            Score = 5,
                            Type = 1
                        },
                        new
                        {
                            Id = 4,
                            NumberOfCorrect = 3,
                            Score = 10,
                            Type = 1
                        },
                        new
                        {
                            Id = 5,
                            NumberOfCorrect = 4,
                            Score = 15,
                            Type = 1
                        },
                        new
                        {
                            Id = 6,
                            NumberOfCorrect = 5,
                            Score = 20,
                            Type = 1
                        },
                        new
                        {
                            Id = 7,
                            NumberOfCorrect = 6,
                            Score = 25,
                            Type = 1
                        },
                        new
                        {
                            Id = 8,
                            NumberOfCorrect = 7,
                            Score = 30,
                            Type = 1
                        },
                        new
                        {
                            Id = 9,
                            NumberOfCorrect = 8,
                            Score = 35,
                            Type = 1
                        },
                        new
                        {
                            Id = 10,
                            NumberOfCorrect = 9,
                            Score = 40,
                            Type = 1
                        },
                        new
                        {
                            Id = 11,
                            NumberOfCorrect = 10,
                            Score = 45,
                            Type = 1
                        },
                        new
                        {
                            Id = 12,
                            NumberOfCorrect = 11,
                            Score = 50,
                            Type = 1
                        },
                        new
                        {
                            Id = 13,
                            NumberOfCorrect = 12,
                            Score = 55,
                            Type = 1
                        },
                        new
                        {
                            Id = 14,
                            NumberOfCorrect = 13,
                            Score = 60,
                            Type = 1
                        },
                        new
                        {
                            Id = 15,
                            NumberOfCorrect = 14,
                            Score = 65,
                            Type = 1
                        },
                        new
                        {
                            Id = 16,
                            NumberOfCorrect = 15,
                            Score = 70,
                            Type = 1
                        },
                        new
                        {
                            Id = 17,
                            NumberOfCorrect = 16,
                            Score = 75,
                            Type = 1
                        },
                        new
                        {
                            Id = 18,
                            NumberOfCorrect = 17,
                            Score = 80,
                            Type = 1
                        },
                        new
                        {
                            Id = 19,
                            NumberOfCorrect = 18,
                            Score = 85,
                            Type = 1
                        },
                        new
                        {
                            Id = 20,
                            NumberOfCorrect = 19,
                            Score = 90,
                            Type = 1
                        },
                        new
                        {
                            Id = 21,
                            NumberOfCorrect = 20,
                            Score = 95,
                            Type = 1
                        },
                        new
                        {
                            Id = 22,
                            NumberOfCorrect = 21,
                            Score = 100,
                            Type = 1
                        },
                        new
                        {
                            Id = 23,
                            NumberOfCorrect = 22,
                            Score = 105,
                            Type = 1
                        },
                        new
                        {
                            Id = 24,
                            NumberOfCorrect = 23,
                            Score = 110,
                            Type = 1
                        },
                        new
                        {
                            Id = 25,
                            NumberOfCorrect = 24,
                            Score = 115,
                            Type = 1
                        },
                        new
                        {
                            Id = 26,
                            NumberOfCorrect = 25,
                            Score = 120,
                            Type = 1
                        },
                        new
                        {
                            Id = 27,
                            NumberOfCorrect = 26,
                            Score = 125,
                            Type = 1
                        },
                        new
                        {
                            Id = 28,
                            NumberOfCorrect = 27,
                            Score = 130,
                            Type = 1
                        },
                        new
                        {
                            Id = 29,
                            NumberOfCorrect = 28,
                            Score = 135,
                            Type = 1
                        },
                        new
                        {
                            Id = 30,
                            NumberOfCorrect = 29,
                            Score = 140,
                            Type = 1
                        },
                        new
                        {
                            Id = 31,
                            NumberOfCorrect = 30,
                            Score = 145,
                            Type = 1
                        },
                        new
                        {
                            Id = 32,
                            NumberOfCorrect = 31,
                            Score = 150,
                            Type = 1
                        },
                        new
                        {
                            Id = 33,
                            NumberOfCorrect = 32,
                            Score = 155,
                            Type = 1
                        },
                        new
                        {
                            Id = 34,
                            NumberOfCorrect = 33,
                            Score = 160,
                            Type = 1
                        },
                        new
                        {
                            Id = 35,
                            NumberOfCorrect = 34,
                            Score = 165,
                            Type = 1
                        },
                        new
                        {
                            Id = 36,
                            NumberOfCorrect = 35,
                            Score = 170,
                            Type = 1
                        },
                        new
                        {
                            Id = 37,
                            NumberOfCorrect = 36,
                            Score = 175,
                            Type = 1
                        },
                        new
                        {
                            Id = 38,
                            NumberOfCorrect = 37,
                            Score = 180,
                            Type = 1
                        },
                        new
                        {
                            Id = 39,
                            NumberOfCorrect = 38,
                            Score = 185,
                            Type = 1
                        },
                        new
                        {
                            Id = 40,
                            NumberOfCorrect = 39,
                            Score = 190,
                            Type = 1
                        },
                        new
                        {
                            Id = 41,
                            NumberOfCorrect = 40,
                            Score = 195,
                            Type = 1
                        },
                        new
                        {
                            Id = 42,
                            NumberOfCorrect = 41,
                            Score = 200,
                            Type = 1
                        },
                        new
                        {
                            Id = 43,
                            NumberOfCorrect = 42,
                            Score = 205,
                            Type = 1
                        },
                        new
                        {
                            Id = 44,
                            NumberOfCorrect = 43,
                            Score = 210,
                            Type = 1
                        },
                        new
                        {
                            Id = 45,
                            NumberOfCorrect = 44,
                            Score = 215,
                            Type = 1
                        },
                        new
                        {
                            Id = 46,
                            NumberOfCorrect = 45,
                            Score = 220,
                            Type = 1
                        },
                        new
                        {
                            Id = 47,
                            NumberOfCorrect = 46,
                            Score = 225,
                            Type = 1
                        },
                        new
                        {
                            Id = 48,
                            NumberOfCorrect = 47,
                            Score = 230,
                            Type = 1
                        },
                        new
                        {
                            Id = 49,
                            NumberOfCorrect = 48,
                            Score = 235,
                            Type = 1
                        },
                        new
                        {
                            Id = 50,
                            NumberOfCorrect = 49,
                            Score = 240,
                            Type = 1
                        },
                        new
                        {
                            Id = 51,
                            NumberOfCorrect = 50,
                            Score = 245,
                            Type = 1
                        },
                        new
                        {
                            Id = 52,
                            NumberOfCorrect = 51,
                            Score = 250,
                            Type = 1
                        },
                        new
                        {
                            Id = 53,
                            NumberOfCorrect = 52,
                            Score = 255,
                            Type = 1
                        },
                        new
                        {
                            Id = 54,
                            NumberOfCorrect = 53,
                            Score = 260,
                            Type = 1
                        },
                        new
                        {
                            Id = 55,
                            NumberOfCorrect = 54,
                            Score = 265,
                            Type = 1
                        },
                        new
                        {
                            Id = 56,
                            NumberOfCorrect = 55,
                            Score = 270,
                            Type = 1
                        },
                        new
                        {
                            Id = 57,
                            NumberOfCorrect = 56,
                            Score = 275,
                            Type = 1
                        },
                        new
                        {
                            Id = 58,
                            NumberOfCorrect = 57,
                            Score = 280,
                            Type = 1
                        },
                        new
                        {
                            Id = 59,
                            NumberOfCorrect = 58,
                            Score = 285,
                            Type = 1
                        },
                        new
                        {
                            Id = 60,
                            NumberOfCorrect = 59,
                            Score = 290,
                            Type = 1
                        },
                        new
                        {
                            Id = 61,
                            NumberOfCorrect = 60,
                            Score = 295,
                            Type = 1
                        },
                        new
                        {
                            Id = 62,
                            NumberOfCorrect = 61,
                            Score = 300,
                            Type = 1
                        },
                        new
                        {
                            Id = 63,
                            NumberOfCorrect = 62,
                            Score = 305,
                            Type = 1
                        },
                        new
                        {
                            Id = 64,
                            NumberOfCorrect = 63,
                            Score = 310,
                            Type = 1
                        },
                        new
                        {
                            Id = 65,
                            NumberOfCorrect = 64,
                            Score = 315,
                            Type = 1
                        },
                        new
                        {
                            Id = 66,
                            NumberOfCorrect = 65,
                            Score = 320,
                            Type = 1
                        },
                        new
                        {
                            Id = 67,
                            NumberOfCorrect = 66,
                            Score = 325,
                            Type = 1
                        },
                        new
                        {
                            Id = 68,
                            NumberOfCorrect = 67,
                            Score = 330,
                            Type = 1
                        },
                        new
                        {
                            Id = 69,
                            NumberOfCorrect = 68,
                            Score = 335,
                            Type = 1
                        },
                        new
                        {
                            Id = 70,
                            NumberOfCorrect = 69,
                            Score = 340,
                            Type = 1
                        },
                        new
                        {
                            Id = 71,
                            NumberOfCorrect = 70,
                            Score = 345,
                            Type = 1
                        },
                        new
                        {
                            Id = 72,
                            NumberOfCorrect = 71,
                            Score = 350,
                            Type = 1
                        },
                        new
                        {
                            Id = 73,
                            NumberOfCorrect = 72,
                            Score = 355,
                            Type = 1
                        },
                        new
                        {
                            Id = 74,
                            NumberOfCorrect = 73,
                            Score = 360,
                            Type = 1
                        },
                        new
                        {
                            Id = 75,
                            NumberOfCorrect = 74,
                            Score = 365,
                            Type = 1
                        },
                        new
                        {
                            Id = 76,
                            NumberOfCorrect = 75,
                            Score = 370,
                            Type = 1
                        },
                        new
                        {
                            Id = 77,
                            NumberOfCorrect = 76,
                            Score = 375,
                            Type = 1
                        },
                        new
                        {
                            Id = 78,
                            NumberOfCorrect = 77,
                            Score = 380,
                            Type = 1
                        },
                        new
                        {
                            Id = 79,
                            NumberOfCorrect = 78,
                            Score = 385,
                            Type = 1
                        },
                        new
                        {
                            Id = 80,
                            NumberOfCorrect = 79,
                            Score = 390,
                            Type = 1
                        },
                        new
                        {
                            Id = 81,
                            NumberOfCorrect = 80,
                            Score = 395,
                            Type = 1
                        },
                        new
                        {
                            Id = 82,
                            NumberOfCorrect = 81,
                            Score = 400,
                            Type = 1
                        },
                        new
                        {
                            Id = 83,
                            NumberOfCorrect = 82,
                            Score = 405,
                            Type = 1
                        },
                        new
                        {
                            Id = 84,
                            NumberOfCorrect = 83,
                            Score = 410,
                            Type = 1
                        },
                        new
                        {
                            Id = 85,
                            NumberOfCorrect = 84,
                            Score = 415,
                            Type = 1
                        },
                        new
                        {
                            Id = 86,
                            NumberOfCorrect = 85,
                            Score = 420,
                            Type = 1
                        },
                        new
                        {
                            Id = 87,
                            NumberOfCorrect = 86,
                            Score = 425,
                            Type = 1
                        },
                        new
                        {
                            Id = 88,
                            NumberOfCorrect = 87,
                            Score = 430,
                            Type = 1
                        },
                        new
                        {
                            Id = 89,
                            NumberOfCorrect = 88,
                            Score = 435,
                            Type = 1
                        },
                        new
                        {
                            Id = 90,
                            NumberOfCorrect = 89,
                            Score = 440,
                            Type = 1
                        },
                        new
                        {
                            Id = 91,
                            NumberOfCorrect = 90,
                            Score = 445,
                            Type = 1
                        },
                        new
                        {
                            Id = 92,
                            NumberOfCorrect = 91,
                            Score = 450,
                            Type = 1
                        },
                        new
                        {
                            Id = 93,
                            NumberOfCorrect = 92,
                            Score = 455,
                            Type = 1
                        },
                        new
                        {
                            Id = 94,
                            NumberOfCorrect = 93,
                            Score = 460,
                            Type = 1
                        },
                        new
                        {
                            Id = 95,
                            NumberOfCorrect = 94,
                            Score = 465,
                            Type = 1
                        },
                        new
                        {
                            Id = 96,
                            NumberOfCorrect = 95,
                            Score = 470,
                            Type = 1
                        },
                        new
                        {
                            Id = 97,
                            NumberOfCorrect = 96,
                            Score = 475,
                            Type = 1
                        },
                        new
                        {
                            Id = 98,
                            NumberOfCorrect = 97,
                            Score = 480,
                            Type = 1
                        },
                        new
                        {
                            Id = 99,
                            NumberOfCorrect = 98,
                            Score = 485,
                            Type = 1
                        },
                        new
                        {
                            Id = 100,
                            NumberOfCorrect = 99,
                            Score = 490,
                            Type = 1
                        },
                        new
                        {
                            Id = 101,
                            NumberOfCorrect = 100,
                            Score = 495,
                            Type = 1
                        },
                        new
                        {
                            Id = 102,
                            NumberOfCorrect = 0,
                            Score = 5,
                            Type = 2
                        },
                        new
                        {
                            Id = 103,
                            NumberOfCorrect = 1,
                            Score = 15,
                            Type = 2
                        },
                        new
                        {
                            Id = 104,
                            NumberOfCorrect = 2,
                            Score = 20,
                            Type = 2
                        },
                        new
                        {
                            Id = 105,
                            NumberOfCorrect = 3,
                            Score = 25,
                            Type = 2
                        },
                        new
                        {
                            Id = 106,
                            NumberOfCorrect = 4,
                            Score = 30,
                            Type = 2
                        },
                        new
                        {
                            Id = 107,
                            NumberOfCorrect = 5,
                            Score = 35,
                            Type = 2
                        },
                        new
                        {
                            Id = 108,
                            NumberOfCorrect = 6,
                            Score = 40,
                            Type = 2
                        },
                        new
                        {
                            Id = 109,
                            NumberOfCorrect = 7,
                            Score = 45,
                            Type = 2
                        },
                        new
                        {
                            Id = 110,
                            NumberOfCorrect = 8,
                            Score = 50,
                            Type = 2
                        },
                        new
                        {
                            Id = 111,
                            NumberOfCorrect = 9,
                            Score = 55,
                            Type = 2
                        },
                        new
                        {
                            Id = 112,
                            NumberOfCorrect = 10,
                            Score = 60,
                            Type = 2
                        },
                        new
                        {
                            Id = 113,
                            NumberOfCorrect = 11,
                            Score = 65,
                            Type = 2
                        },
                        new
                        {
                            Id = 114,
                            NumberOfCorrect = 12,
                            Score = 70,
                            Type = 2
                        },
                        new
                        {
                            Id = 115,
                            NumberOfCorrect = 13,
                            Score = 75,
                            Type = 2
                        },
                        new
                        {
                            Id = 116,
                            NumberOfCorrect = 14,
                            Score = 80,
                            Type = 2
                        },
                        new
                        {
                            Id = 117,
                            NumberOfCorrect = 15,
                            Score = 85,
                            Type = 2
                        },
                        new
                        {
                            Id = 118,
                            NumberOfCorrect = 16,
                            Score = 90,
                            Type = 2
                        },
                        new
                        {
                            Id = 119,
                            NumberOfCorrect = 17,
                            Score = 95,
                            Type = 2
                        },
                        new
                        {
                            Id = 120,
                            NumberOfCorrect = 18,
                            Score = 100,
                            Type = 2
                        },
                        new
                        {
                            Id = 121,
                            NumberOfCorrect = 19,
                            Score = 105,
                            Type = 2
                        },
                        new
                        {
                            Id = 122,
                            NumberOfCorrect = 20,
                            Score = 110,
                            Type = 2
                        },
                        new
                        {
                            Id = 123,
                            NumberOfCorrect = 21,
                            Score = 115,
                            Type = 2
                        },
                        new
                        {
                            Id = 124,
                            NumberOfCorrect = 22,
                            Score = 120,
                            Type = 2
                        },
                        new
                        {
                            Id = 125,
                            NumberOfCorrect = 23,
                            Score = 125,
                            Type = 2
                        },
                        new
                        {
                            Id = 126,
                            NumberOfCorrect = 24,
                            Score = 130,
                            Type = 2
                        },
                        new
                        {
                            Id = 127,
                            NumberOfCorrect = 25,
                            Score = 135,
                            Type = 2
                        },
                        new
                        {
                            Id = 128,
                            NumberOfCorrect = 26,
                            Score = 140,
                            Type = 2
                        },
                        new
                        {
                            Id = 129,
                            NumberOfCorrect = 27,
                            Score = 145,
                            Type = 2
                        },
                        new
                        {
                            Id = 130,
                            NumberOfCorrect = 28,
                            Score = 150,
                            Type = 2
                        },
                        new
                        {
                            Id = 131,
                            NumberOfCorrect = 29,
                            Score = 155,
                            Type = 2
                        },
                        new
                        {
                            Id = 132,
                            NumberOfCorrect = 30,
                            Score = 160,
                            Type = 2
                        },
                        new
                        {
                            Id = 133,
                            NumberOfCorrect = 31,
                            Score = 165,
                            Type = 2
                        },
                        new
                        {
                            Id = 134,
                            NumberOfCorrect = 32,
                            Score = 170,
                            Type = 2
                        },
                        new
                        {
                            Id = 135,
                            NumberOfCorrect = 33,
                            Score = 175,
                            Type = 2
                        },
                        new
                        {
                            Id = 136,
                            NumberOfCorrect = 34,
                            Score = 180,
                            Type = 2
                        },
                        new
                        {
                            Id = 137,
                            NumberOfCorrect = 35,
                            Score = 185,
                            Type = 2
                        },
                        new
                        {
                            Id = 138,
                            NumberOfCorrect = 36,
                            Score = 190,
                            Type = 2
                        },
                        new
                        {
                            Id = 139,
                            NumberOfCorrect = 37,
                            Score = 195,
                            Type = 2
                        },
                        new
                        {
                            Id = 140,
                            NumberOfCorrect = 38,
                            Score = 200,
                            Type = 2
                        },
                        new
                        {
                            Id = 141,
                            NumberOfCorrect = 39,
                            Score = 205,
                            Type = 2
                        },
                        new
                        {
                            Id = 142,
                            NumberOfCorrect = 40,
                            Score = 210,
                            Type = 2
                        },
                        new
                        {
                            Id = 143,
                            NumberOfCorrect = 41,
                            Score = 215,
                            Type = 2
                        },
                        new
                        {
                            Id = 144,
                            NumberOfCorrect = 42,
                            Score = 220,
                            Type = 2
                        },
                        new
                        {
                            Id = 145,
                            NumberOfCorrect = 43,
                            Score = 225,
                            Type = 2
                        },
                        new
                        {
                            Id = 146,
                            NumberOfCorrect = 44,
                            Score = 230,
                            Type = 2
                        },
                        new
                        {
                            Id = 147,
                            NumberOfCorrect = 45,
                            Score = 235,
                            Type = 2
                        },
                        new
                        {
                            Id = 148,
                            NumberOfCorrect = 46,
                            Score = 240,
                            Type = 2
                        },
                        new
                        {
                            Id = 149,
                            NumberOfCorrect = 47,
                            Score = 245,
                            Type = 2
                        },
                        new
                        {
                            Id = 150,
                            NumberOfCorrect = 48,
                            Score = 250,
                            Type = 2
                        },
                        new
                        {
                            Id = 151,
                            NumberOfCorrect = 49,
                            Score = 255,
                            Type = 2
                        },
                        new
                        {
                            Id = 152,
                            NumberOfCorrect = 50,
                            Score = 260,
                            Type = 2
                        },
                        new
                        {
                            Id = 153,
                            NumberOfCorrect = 51,
                            Score = 265,
                            Type = 2
                        },
                        new
                        {
                            Id = 154,
                            NumberOfCorrect = 52,
                            Score = 270,
                            Type = 2
                        },
                        new
                        {
                            Id = 155,
                            NumberOfCorrect = 53,
                            Score = 275,
                            Type = 2
                        },
                        new
                        {
                            Id = 156,
                            NumberOfCorrect = 54,
                            Score = 280,
                            Type = 2
                        },
                        new
                        {
                            Id = 157,
                            NumberOfCorrect = 55,
                            Score = 285,
                            Type = 2
                        },
                        new
                        {
                            Id = 158,
                            NumberOfCorrect = 56,
                            Score = 290,
                            Type = 2
                        },
                        new
                        {
                            Id = 159,
                            NumberOfCorrect = 57,
                            Score = 295,
                            Type = 2
                        },
                        new
                        {
                            Id = 160,
                            NumberOfCorrect = 58,
                            Score = 300,
                            Type = 2
                        },
                        new
                        {
                            Id = 161,
                            NumberOfCorrect = 59,
                            Score = 305,
                            Type = 2
                        },
                        new
                        {
                            Id = 162,
                            NumberOfCorrect = 60,
                            Score = 310,
                            Type = 2
                        },
                        new
                        {
                            Id = 163,
                            NumberOfCorrect = 61,
                            Score = 315,
                            Type = 2
                        },
                        new
                        {
                            Id = 164,
                            NumberOfCorrect = 62,
                            Score = 320,
                            Type = 2
                        },
                        new
                        {
                            Id = 165,
                            NumberOfCorrect = 63,
                            Score = 325,
                            Type = 2
                        },
                        new
                        {
                            Id = 166,
                            NumberOfCorrect = 64,
                            Score = 330,
                            Type = 2
                        },
                        new
                        {
                            Id = 167,
                            NumberOfCorrect = 65,
                            Score = 335,
                            Type = 2
                        },
                        new
                        {
                            Id = 168,
                            NumberOfCorrect = 66,
                            Score = 340,
                            Type = 2
                        },
                        new
                        {
                            Id = 169,
                            NumberOfCorrect = 67,
                            Score = 345,
                            Type = 2
                        },
                        new
                        {
                            Id = 170,
                            NumberOfCorrect = 68,
                            Score = 350,
                            Type = 2
                        },
                        new
                        {
                            Id = 171,
                            NumberOfCorrect = 69,
                            Score = 355,
                            Type = 2
                        },
                        new
                        {
                            Id = 172,
                            NumberOfCorrect = 70,
                            Score = 360,
                            Type = 2
                        },
                        new
                        {
                            Id = 173,
                            NumberOfCorrect = 71,
                            Score = 365,
                            Type = 2
                        },
                        new
                        {
                            Id = 174,
                            NumberOfCorrect = 72,
                            Score = 370,
                            Type = 2
                        },
                        new
                        {
                            Id = 175,
                            NumberOfCorrect = 73,
                            Score = 375,
                            Type = 2
                        },
                        new
                        {
                            Id = 176,
                            NumberOfCorrect = 74,
                            Score = 380,
                            Type = 2
                        },
                        new
                        {
                            Id = 177,
                            NumberOfCorrect = 75,
                            Score = 385,
                            Type = 2
                        },
                        new
                        {
                            Id = 178,
                            NumberOfCorrect = 76,
                            Score = 390,
                            Type = 2
                        },
                        new
                        {
                            Id = 179,
                            NumberOfCorrect = 77,
                            Score = 395,
                            Type = 2
                        },
                        new
                        {
                            Id = 180,
                            NumberOfCorrect = 78,
                            Score = 400,
                            Type = 2
                        },
                        new
                        {
                            Id = 181,
                            NumberOfCorrect = 79,
                            Score = 405,
                            Type = 2
                        },
                        new
                        {
                            Id = 182,
                            NumberOfCorrect = 80,
                            Score = 410,
                            Type = 2
                        },
                        new
                        {
                            Id = 183,
                            NumberOfCorrect = 81,
                            Score = 415,
                            Type = 2
                        },
                        new
                        {
                            Id = 184,
                            NumberOfCorrect = 82,
                            Score = 420,
                            Type = 2
                        },
                        new
                        {
                            Id = 185,
                            NumberOfCorrect = 83,
                            Score = 425,
                            Type = 2
                        },
                        new
                        {
                            Id = 186,
                            NumberOfCorrect = 84,
                            Score = 430,
                            Type = 2
                        },
                        new
                        {
                            Id = 187,
                            NumberOfCorrect = 85,
                            Score = 435,
                            Type = 2
                        },
                        new
                        {
                            Id = 188,
                            NumberOfCorrect = 86,
                            Score = 440,
                            Type = 2
                        },
                        new
                        {
                            Id = 189,
                            NumberOfCorrect = 87,
                            Score = 445,
                            Type = 2
                        },
                        new
                        {
                            Id = 190,
                            NumberOfCorrect = 88,
                            Score = 450,
                            Type = 2
                        },
                        new
                        {
                            Id = 191,
                            NumberOfCorrect = 89,
                            Score = 455,
                            Type = 2
                        },
                        new
                        {
                            Id = 192,
                            NumberOfCorrect = 90,
                            Score = 460,
                            Type = 2
                        },
                        new
                        {
                            Id = 193,
                            NumberOfCorrect = 91,
                            Score = 465,
                            Type = 2
                        },
                        new
                        {
                            Id = 194,
                            NumberOfCorrect = 92,
                            Score = 470,
                            Type = 2
                        },
                        new
                        {
                            Id = 195,
                            NumberOfCorrect = 93,
                            Score = 475,
                            Type = 2
                        },
                        new
                        {
                            Id = 196,
                            NumberOfCorrect = 94,
                            Score = 480,
                            Type = 2
                        },
                        new
                        {
                            Id = 197,
                            NumberOfCorrect = 95,
                            Score = 485,
                            Type = 2
                        },
                        new
                        {
                            Id = 198,
                            NumberOfCorrect = 96,
                            Score = 490,
                            Type = 2
                        },
                        new
                        {
                            Id = 199,
                            NumberOfCorrect = 97,
                            Score = 495,
                            Type = 2
                        },
                        new
                        {
                            Id = 200,
                            NumberOfCorrect = 98,
                            Score = 495,
                            Type = 2
                        },
                        new
                        {
                            Id = 201,
                            NumberOfCorrect = 99,
                            Score = 495,
                            Type = 2
                        },
                        new
                        {
                            Id = 202,
                            NumberOfCorrect = 100,
                            Score = 495,
                            Type = 2
                        });
                });

            modelBuilder.Entity("Test.Quiz.Api.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Sex")
                        .HasColumnType("int");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Test.Quiz.Api.Data.Entities.UserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>");

                    b.HasDiscriminator().HasValue("UserRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Test.Quiz.Api.Data.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Test.Quiz.Api.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Test.Quiz.Api.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Test.Quiz.Api.Data.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Test.Quiz.Api.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Test.Quiz.Api.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Test.Quiz.Api.Data.Entities.Comment", b =>
                {
                    b.HasOne("Test.Quiz.Api.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Test.Quiz.Api.Data.Entities.ExamQuestion", b =>
                {
                    b.HasOne("Test.Quiz.Api.Data.Entities.Exam", "Exam")
                        .WithMany("ExamQuestions")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Test.Quiz.Api.Data.Entities.Question", "Question")
                        .WithMany("ExamQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Test.Quiz.Api.Data.Entities.ExamResult", b =>
                {
                    b.HasOne("Test.Quiz.Api.Data.Entities.Exam", null)
                        .WithMany("ExamResults")
                        .HasForeignKey("ExamId");
                });

            modelBuilder.Entity("Test.Quiz.Api.Data.Entities.ExamToeicResult", b =>
                {
                    b.HasOne("Test.Quiz.Api.Data.Entities.ExamToeic", "ExamToeic")
                        .WithMany("ExamToeicResults")
                        .HasForeignKey("ExamToeicId");

                    b.Navigation("ExamToeic");
                });

            modelBuilder.Entity("Test.Quiz.Api.Data.Entities.ExamToeicResultDetail", b =>
                {
                    b.HasOne("Test.Quiz.Api.Data.Entities.ExamToeicResult", null)
                        .WithMany("ExamToeicResultDetails")
                        .HasForeignKey("ExamToeicResultId");
                });

            modelBuilder.Entity("Test.Quiz.Api.Data.Entities.GroupToeic", b =>
                {
                    b.HasOne("Test.Quiz.Api.Data.Entities.PartToeic", "PartToeics")
                        .WithMany("GroupToeics")
                        .HasForeignKey("PartToeicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PartToeics");
                });

            modelBuilder.Entity("Test.Quiz.Api.Data.Entities.GroupToeicQuestion", b =>
                {
                    b.HasOne("Test.Quiz.Api.Data.Entities.GroupToeic", "GroupToeic")
                        .WithMany("GroupToeicQuestions")
                        .HasForeignKey("GroupToeicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Test.Quiz.Api.Data.Entities.Question", "Question")
                        .WithMany("GroupToeicQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupToeic");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Test.Quiz.Api.Data.Entities.PartToeic", b =>
                {
                    b.HasOne("Test.Quiz.Api.Data.Entities.ExamToeic", "ExamToeics")
                        .WithMany("PartToeics")
                        .HasForeignKey("ExamToeicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExamToeics");
                });

            modelBuilder.Entity("Test.Quiz.Api.Data.Entities.Question", b =>
                {
                    b.HasOne("Test.Quiz.Api.Data.Entities.QuestionCategory", "QuestionCategory")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Test.Quiz.Api.Data.Entities.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId");

                    b.Navigation("QuestionCategory");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("Test.Quiz.Api.Data.Entities.QuestionAnswer", b =>
                {
                    b.HasOne("Test.Quiz.Api.Data.Entities.Question", "Question")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Test.Quiz.Api.Data.Entities.Exam", b =>
                {
                    b.Navigation("ExamQuestions");

                    b.Navigation("ExamResults");
                });

            modelBuilder.Entity("Test.Quiz.Api.Data.Entities.ExamToeic", b =>
                {
                    b.Navigation("ExamToeicResults");

                    b.Navigation("PartToeics");
                });

            modelBuilder.Entity("Test.Quiz.Api.Data.Entities.ExamToeicResult", b =>
                {
                    b.Navigation("ExamToeicResultDetails");
                });

            modelBuilder.Entity("Test.Quiz.Api.Data.Entities.GroupToeic", b =>
                {
                    b.Navigation("GroupToeicQuestions");
                });

            modelBuilder.Entity("Test.Quiz.Api.Data.Entities.PartToeic", b =>
                {
                    b.Navigation("GroupToeics");
                });

            modelBuilder.Entity("Test.Quiz.Api.Data.Entities.Question", b =>
                {
                    b.Navigation("ExamQuestions");

                    b.Navigation("GroupToeicQuestions");

                    b.Navigation("QuestionAnswers");
                });

            modelBuilder.Entity("Test.Quiz.Api.Data.Entities.QuestionCategory", b =>
                {
                    b.Navigation("Questions");
                });
#pragma warning restore 612, 618
        }
    }
}
