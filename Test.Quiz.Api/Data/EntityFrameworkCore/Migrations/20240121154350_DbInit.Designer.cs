// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Test.Quiz.Api.Data.EntityFrameworkCore;

#nullable disable

namespace Test.Quiz.Api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240121154350_DbInit")]
    partial class DbInit
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.26")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserRole<Guid>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("Test.Quiz.Api.Data.Entities.Exam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("time");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsAllowChangeTab")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMixQuestion")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMixQuestionAnswer")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSeeScore")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsShowContent")
                        .HasColumnType("bit");

                    b.Property<int?>("NumberQuestionDifficult")
                        .HasColumnType("int");

                    b.Property<int?>("NumberQuestionEasy")
                        .HasColumnType("int");

                    b.Property<int?>("NumberQuestionModerate")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("Test.Quiz.Api.Data.Entities.ExamQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ExamId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.HasIndex("QuestionId");

                    b.ToTable("ExamQuestions");
                });

            modelBuilder.Entity("Test.Quiz.Api.Data.Entities.ExamResult", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan?>("DurationTime")
                        .HasColumnType("time");

                    b.Property<int?>("ExamId")
                        .HasColumnType("int");

                    b.Property<int?>("NumberChangeTab")
                        .HasColumnType("int");

                    b.Property<int?>("NumberCorrectAnswers")
                        .HasColumnType("int");

                    b.Property<int?>("Score")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.ToTable("ExamResults");
                });

            modelBuilder.Entity("Test.Quiz.Api.Data.Entities.ExamToeic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("time");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsAllowChangeTab")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMixQuestion")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMixQuestionAnswer")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSeeScore")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsShowContent")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("ExamToeics");
                });

            modelBuilder.Entity("Test.Quiz.Api.Data.Entities.ExamToeicResult", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan?>("DurationTime")
                        .HasColumnType("time");

                    b.Property<int?>("ExamToeicId")
                        .HasColumnType("int");

                    b.Property<int?>("NumberChangeTab")
                        .HasColumnType("int");

                    b.Property<int?>("NumberCorrectListeningAnswers")
                        .HasColumnType("int");

                    b.Property<int?>("NumberCorrectOverallAnswers")
                        .HasColumnType("int");

                    b.Property<int?>("NumberCorrectReadingAnswers")
                        .HasColumnType("int");

                    b.Property<int?>("Score")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ExamToeicId");

                    b.ToTable("ExamToeicResults");
                });

            modelBuilder.Entity("Test.Quiz.Api.Data.Entities.GroupToeic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Audio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Paragraph")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PartToeicId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PartToeicId");

                    b.ToTable("GroupToeics");
                });

            modelBuilder.Entity("Test.Quiz.Api.Data.Entities.GroupToeicQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("GroupToeicId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GroupToeicId");

                    b.HasIndex("QuestionId");

                    b.ToTable("GroupToeicQuestions");
                });

            modelBuilder.Entity("Test.Quiz.Api.Data.Entities.PartToeic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ExamToeicId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ExamToeicId");

                    b.ToTable("PartToeics");
                });

            modelBuilder.Entity("Test.Quiz.Api.Data.Entities.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Audio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Difficulty")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Paragraph")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int?>("SectionId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeForm")
                        .HasColumnType("int");

                    b.Property<int>("TypeKind")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuestionCategoryId");

                    b.HasIndex("SectionId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Test.Quiz.Api.Data.Entities.QuestionAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionAnswers");
                });

            modelBuilder.Entity("Test.Quiz.Api.Data.Entities.QuestionCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentQuestionCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("QuestionCategories");
                });

            modelBuilder.Entity("Test.Quiz.Api.Data.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("8d04dce2-969a-435d-bba4-df3f325983dc"),
                            ConcurrencyStamp = "450fd49c-3b28-4cbc-8006-54896fbb078e",
                            Description = "Admin Role",
                            Name = "admin",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = new Guid("c3f087a2-48d5-4e09-8a63-8830a7b5b4e3"),
                            ConcurrencyStamp = "3185f28f-eddc-44de-9965-aa7e5606270b",
                            Description = "User Role",
                            Name = "user",
                            NormalizedName = "user"
                        });
                });

            modelBuilder.Entity("Test.Quiz.Api.Data.Entities.Section", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("Test.Quiz.Api.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Sex")
                        .HasColumnType("int");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            AccessFailedCount = 0,
                            AvatarUrl = "/User/AvatarDefault.png",
                            ConcurrencyStamp = "661fa151-deb3-41f2-9a04-9dd5889fe91f",
                            Email = "thanga3tqk1821@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Nguyễn Văn Thắng",
                            NormalizedEmail = "thanga3tqk1821@gmail.com",
                            NormalizedUserName = "admin",
                            PasswordHash = "AQAAAAEAACcQAAAAED4oBDb5e72oEWVc+ArCLvUYjL30zeiw76PWIto94/yv1Nf2Hu9CNGwJq/4WKlyIUw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("c4f97a72-6b4a-47d3-ba1b-6fe15e62c192"),
                            AccessFailedCount = 0,
                            AvatarUrl = "/User/AvatarDefault.png",
                            ConcurrencyStamp = "301f5700-1aff-4b8c-b518-92acb76293c4",
                            Email = "chienthangvipkc@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Nguyễn Thị Ngọc Anh",
                            NormalizedEmail = "chienthangvipkc@gmail.com",
                            NormalizedUserName = "user",
                            PasswordHash = "AQAAAAEAACcQAAAAEJeICfv0obfc6HuQIhohTx9rHvl+kYG7Rt45jpTNC5sth8d0K1T/MyL4nUfaaJFY5Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "user"
                        },
                        new
                        {
                            Id = new Guid("1a3e854a-843d-4e65-ab88-9d5736c831f2"),
                            AccessFailedCount = 0,
                            AvatarUrl = "/User/AvatarDefault.png",
                            ConcurrencyStamp = "bf4d0089-61ee-4140-a2b8-a7a9c20a056e",
                            Email = "nguyenvanthang@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Nguyễn Văn Hà",
                            NormalizedEmail = "nguyenvanthang@gmail.com",
                            NormalizedUserName = "nguyenvanthang",
                            PasswordHash = "AQAAAAEAACcQAAAAEDyakAQ3MQOKFZIFDCbPUm8aCds0i7QZFO3YhI106Cr+6QNSZr1gxQDyznGI8uYxUQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "nguyenvanthang"
                        },
                        new
                        {
                            Id = new Guid("d5e5b63a-53a1-4f88-a399-1f7c7f4b08a6"),
                            AccessFailedCount = 0,
                            AvatarUrl = "/User/AvatarDefault.png",
                            ConcurrencyStamp = "42f79f94-9958-4bea-ab2a-f773738c5075",
                            Email = "phamxuantuyen@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Phạm Xuân Tuyển",
                            NormalizedEmail = "phamxuantuyen@gmail.com",
                            NormalizedUserName = "phamxuantuyen",
                            PasswordHash = "AQAAAAEAACcQAAAAELMwpe8Cxca/Kdto15KGhARRyYoKYFLVV9561kFpLiuN+q7pM6fnV7Z/QWYEwNcUhg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "phamxuantuyen"
                        },
                        new
                        {
                            Id = new Guid("d5e5b63a-53a1-4f88-a399-1f7c7f4b08a1"),
                            AccessFailedCount = 0,
                            AvatarUrl = "/User/AvatarDefault.png",
                            ConcurrencyStamp = "54e3cdd4-3599-48e6-b548-1bfe59245ea5",
                            Email = "daoxuanduc@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Đào Xuân Đức",
                            NormalizedEmail = "daoxuanduc@gmail.com",
                            NormalizedUserName = "daoxuanduc",
                            PasswordHash = "AQAAAAEAACcQAAAAEMlrpfVqznH6MY+UHvguNIURZqtBjVz9g3HKVXx0nHqdOy305EiPM+8uaL8CDQ2oRg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "daoxuanduc"
                        },
                        new
                        {
                            Id = new Guid("d5e5b63a-53a1-4f88-a399-1f7c7f4b08b1"),
                            AccessFailedCount = 0,
                            AvatarUrl = "/User/AvatarDefault.png",
                            ConcurrencyStamp = "c0cd5358-31a2-4d42-827e-b7f54a36cd23",
                            Email = "hoanggiabao@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Hoàng Gia Bảo",
                            NormalizedEmail = "hoanggiabao@gmail.com",
                            NormalizedUserName = "hoanggiabao",
                            PasswordHash = "AQAAAAEAACcQAAAAEGl29V5o66S7CLGyKO+bbVYjVAegmuGzOAVUBHDekW3yOTuR7Kho5u/ljggzveCepw==",
                            PhoneNumber = "+84922002360",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "hoanggiabao"
                        },
                        new
                        {
                            Id = new Guid("d5e5b63a-53a1-4f88-a399-1f7c7f4b08a7"),
                            AccessFailedCount = 0,
                            AvatarUrl = "/User/AvatarDefault.png",
                            ConcurrencyStamp = "c0de6f05-5239-4793-82ff-4b9e40c3d6b6",
                            Email = "buixuanhoang@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Bùi Xuân Hoàng",
                            NormalizedEmail = "buixuanhoang@gmail.com",
                            NormalizedUserName = "buixuanhoang",
                            PasswordHash = "AQAAAAEAACcQAAAAEISgAyoTSmXEfiZROMLwYoO3obrCNd4P2iU4+sdQheUhfVJNo1ZqFu+wzR3w/p9BGg==",
                            PhoneNumber = "+84922002111",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "buixuanhoang"
                        },
                        new
                        {
                            Id = new Guid("d5e5b63a-53a1-4f88-a399-1f7c7f4b08a2"),
                            AccessFailedCount = 0,
                            AvatarUrl = "/User/AvatarDefault.png",
                            ConcurrencyStamp = "00386128-7f4c-4955-b362-0647d6c14e5d",
                            Email = "phamthanhlong@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Phạm Thanh Long",
                            NormalizedEmail = "phamthanhlong@gmail.com",
                            NormalizedUserName = "phamthanhlong",
                            PasswordHash = "AQAAAAEAACcQAAAAEJWdSnhc2jZh7ghRRcxBU/oWF8szeLH0oiTaC9c1SBy2V41RzH4vyJcO5bidGm5qYQ==",
                            PhoneNumber = "+84922002222",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "phamthanhlong"
                        },
                        new
                        {
                            Id = new Guid("d5e5b63a-53a1-4f88-a399-1f7c7f4b08b2"),
                            AccessFailedCount = 0,
                            AvatarUrl = "/User/AvatarDefault.png",
                            ConcurrencyStamp = "6667e834-f37b-4d80-b162-b465950d6dbd",
                            Email = "nguyendinhhung@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Nguyễn Đình Hùng",
                            NormalizedEmail = "nguyendinhhung@gmail.com",
                            NormalizedUserName = "nguyendinhhung",
                            PasswordHash = "AQAAAAEAACcQAAAAEGi+x7urBM0kVBBQcxcn/peCEs6V/q1KLYf/0fA3U0cbF6lvA4A7g7bslQZcPK8zGw==",
                            PhoneNumber = "+84922002333",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "nguyendinhhung"
                        });
                });

            modelBuilder.Entity("Test.Quiz.Api.Data.Entities.UserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>");

                    b.HasDiscriminator().HasValue("UserRole");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            RoleId = new Guid("8d04dce2-969a-435d-bba4-df3f325983dc")
                        },
                        new
                        {
                            UserId = new Guid("c4f97a72-6b4a-47d3-ba1b-6fe15e62c192"),
                            RoleId = new Guid("c3f087a2-48d5-4e09-8a63-8830a7b5b4e3")
                        },
                        new
                        {
                            UserId = new Guid("1a3e854a-843d-4e65-ab88-9d5736c831f2"),
                            RoleId = new Guid("c3f087a2-48d5-4e09-8a63-8830a7b5b4e3")
                        },
                        new
                        {
                            UserId = new Guid("d5e5b63a-53a1-4f88-a399-1f7c7f4b08a6"),
                            RoleId = new Guid("c3f087a2-48d5-4e09-8a63-8830a7b5b4e3")
                        },
                        new
                        {
                            UserId = new Guid("d5e5b63a-53a1-4f88-a399-1f7c7f4b08a1"),
                            RoleId = new Guid("c3f087a2-48d5-4e09-8a63-8830a7b5b4e3")
                        },
                        new
                        {
                            UserId = new Guid("d5e5b63a-53a1-4f88-a399-1f7c7f4b08b1"),
                            RoleId = new Guid("c3f087a2-48d5-4e09-8a63-8830a7b5b4e3")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Test.Quiz.Api.Data.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Test.Quiz.Api.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Test.Quiz.Api.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Test.Quiz.Api.Data.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Test.Quiz.Api.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Test.Quiz.Api.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Test.Quiz.Api.Data.Entities.ExamQuestion", b =>
                {
                    b.HasOne("Test.Quiz.Api.Data.Entities.Exam", "Exam")
                        .WithMany("ExamQuestions")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Test.Quiz.Api.Data.Entities.Question", "Question")
                        .WithMany("ExamQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Test.Quiz.Api.Data.Entities.ExamResult", b =>
                {
                    b.HasOne("Test.Quiz.Api.Data.Entities.Exam", null)
                        .WithMany("ExamResults")
                        .HasForeignKey("ExamId");
                });

            modelBuilder.Entity("Test.Quiz.Api.Data.Entities.ExamToeicResult", b =>
                {
                    b.HasOne("Test.Quiz.Api.Data.Entities.ExamToeic", null)
                        .WithMany("ExamToeicResults")
                        .HasForeignKey("ExamToeicId");
                });

            modelBuilder.Entity("Test.Quiz.Api.Data.Entities.GroupToeic", b =>
                {
                    b.HasOne("Test.Quiz.Api.Data.Entities.PartToeic", "PartToeics")
                        .WithMany("GroupToeics")
                        .HasForeignKey("PartToeicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PartToeics");
                });

            modelBuilder.Entity("Test.Quiz.Api.Data.Entities.GroupToeicQuestion", b =>
                {
                    b.HasOne("Test.Quiz.Api.Data.Entities.GroupToeic", "GroupToeic")
                        .WithMany("GroupToeicQuestions")
                        .HasForeignKey("GroupToeicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Test.Quiz.Api.Data.Entities.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupToeic");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Test.Quiz.Api.Data.Entities.PartToeic", b =>
                {
                    b.HasOne("Test.Quiz.Api.Data.Entities.ExamToeic", "ExamToeics")
                        .WithMany("PartToeics")
                        .HasForeignKey("ExamToeicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExamToeics");
                });

            modelBuilder.Entity("Test.Quiz.Api.Data.Entities.Question", b =>
                {
                    b.HasOne("Test.Quiz.Api.Data.Entities.QuestionCategory", "QuestionCategory")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Test.Quiz.Api.Data.Entities.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId");

                    b.Navigation("QuestionCategory");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("Test.Quiz.Api.Data.Entities.QuestionAnswer", b =>
                {
                    b.HasOne("Test.Quiz.Api.Data.Entities.Question", "Question")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Test.Quiz.Api.Data.Entities.Exam", b =>
                {
                    b.Navigation("ExamQuestions");

                    b.Navigation("ExamResults");
                });

            modelBuilder.Entity("Test.Quiz.Api.Data.Entities.ExamToeic", b =>
                {
                    b.Navigation("ExamToeicResults");

                    b.Navigation("PartToeics");
                });

            modelBuilder.Entity("Test.Quiz.Api.Data.Entities.GroupToeic", b =>
                {
                    b.Navigation("GroupToeicQuestions");
                });

            modelBuilder.Entity("Test.Quiz.Api.Data.Entities.PartToeic", b =>
                {
                    b.Navigation("GroupToeics");
                });

            modelBuilder.Entity("Test.Quiz.Api.Data.Entities.Question", b =>
                {
                    b.Navigation("ExamQuestions");

                    b.Navigation("QuestionAnswers");
                });

            modelBuilder.Entity("Test.Quiz.Api.Data.Entities.QuestionCategory", b =>
                {
                    b.Navigation("Questions");
                });
#pragma warning restore 612, 618
        }
    }
}
